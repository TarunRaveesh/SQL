CREATE DATABASE JOINS;
USE JOINS;

CREATE TABLE EMPLOYEE (
	ID INT PRIMARY KEY,
    FNAME VARCHAR(255),
    LNAME VARCHAR(255),
    AGE INT,
    EMAIL VARCHAR(255),
    PHONE INT,
    CITY VARCHAR(25)
);

INSERT INTO EMPLOYEE (ID, FNAME, LNAME, AGE, EMAIL, PHONE, CITY) VALUES
	(1, 'John', 'Doe', 30, 'john.doe@email.com', 123456789, 'New York'),
	(2, 'Jane', 'Smith', 25, 'jane.smith@email.com', 987654321, 'Los Angeles'),
	(3, 'Michael', 'Johnson', 35, 'michael@email.com', 456789123, 'Chicago'),
	(4, 'Emily', 'Davis', 28, 'emily.davis@email.com', 789123456, 'Houston'),
	(5, 'David', 'Brown', 32, 'david.brown@email.com', 321654987, 'Miami');

CREATE TABLE PROJECT (
	ID INT PRIMARY KEY,
    EMP_ID INT,
    NAME VARCHAR(255),
    STARTDATE DATE,
    CLIENT_ID INT,
    FOREIGN KEY (EMP_ID) REFERENCES EMPLOYEE(ID) ON DELETE CASCADE
);

INSERT INTO PROJECT (ID, EMP_ID, NAME, STARTDATE, CLIENT_ID) VALUES
	(1, 1, 'Project Alpha', '2022-01-01', 3),
	(2, 2, 'Project Beta', '2022-02-15', 1),
	(3, 3, 'Project Gamma', '2022-03-20', 5),
	(4, 3, 'Project Delta', '2022-04-10', 2),
	(5, 5, 'Project Epsilon', '2022-05-05', 4);

CREATE TABLE CLIENT (
	ID INT PRIMARY KEY,
    FIRST_NAME VARCHAR(255),
	LAST_NAME VARCHAR(255),
	AGE INT,
    EMAIL VARCHAR(255),
    PHONE INT,
    CITY VARCHAR(255),
    EMP_ID INT,
    FOREIGN KEY (EMP_ID) REFERENCES EMPLOYEE(ID) ON DELETE CASCADE
);

INSERT INTO CLIENT (ID, FIRST_NAME, LAST_NAME, AGE, EMAIL, PHONE, CITY, EMP_ID) VALUES
	(1, 'Alice', 'Smith', 40, 'alice.smith@email.com', 654987321, 'New York', 3),
	(2, 'Bob', 'Johnson', 45, 'bob.johnson@email.com', 987321654, 'Los Angeles', 3),
	(3, 'Carol', 'Davis', 50, 'carol.davis@email.com', 456123789, 'Chicago', 1),
	(4, 'Dan', 'Brown', 55, 'dan.brown@email.com', 321789654, 'Houston', 5),
	(5, 'Eve', 'Wilson', 60, 'eve.wilson@email.com', 789456123, 'Miami', 2);
    
SELECT * FROM EMPLOYEE;
SELECT * FROM PROJECT;
SELECT * FROM CLIENT;

-- INNER JOIN (LIST ALL EMP ID'S, NAMES ALONG WITH ALOCATED PROJECT)
SELECT E.ID, E.FNAME, E.LNAME, P.ID, P.NAME FROM EMPLOYEE AS E
INNER JOIN PROJECT AS P ON E.ID = P.EMP_ID;

SELECT * FROM EMPLOYEE AS E INNER JOIN PROJECT AS P ON E.ID = P.EMP_ID;

-- WITHOUT JOIN KEYWORD
SELECT * FROM EMPLOYEE AS E, PROJECT AS P WHERE E.ID = P.EMP_ID; 

-- FETCH ALL EMPLOYEE ID AND CONTACT INFO WHO WORK FROM CHICAGO WITH CLIENT IN LOS ANGELES
SELECT E.ID, E.EMAIL, E.PHONE, C.FIRST_NAME, C.LAST_NAME FROM EMPLOYEE AS E
INNER JOIN CLIENT AS C ON E.ID = C.EMP_ID WHERE E.CITY = 'CHICAGO' AND C.CITY = 'LOS ANGELES';

-- LEFT JOIN (FETCH PROJECTS ALLOCATED TO EACH EMPLOYEE)
SELECT * FROM EMPLOYEE AS E LEFT JOIN PROJECT AS P ON E.ID = P.EMP_ID;

-- RIGHT JOIN (LIST ALL PROJECTS ALONG WITH EMP NAME AND EMAIL)
SELECT E.ID, E.FNAME, E.LNAME, E.EMAIL, P.ID, P.NAME FROM EMPLOYEE AS E
RIGHT JOIN PROJECT AS P ON E.ID = P.EMP_ID;

-- CROSS JOIN (LIST ALL POSSIBLE COMBINATIONS OF EMPLOYEES AND PROJECTS THAT CAN EXIST
SELECT E.FNAME, E.LNAME, P.ID, P.NAME FROM EMPLOYEE AS E
CROSS JOIN PROJECT AS P;   

-- SET OPERATIONS
CREATE TABLE DEPT1 (EMPID INT, NAME VARCHAR(255), ROLE VARCHAR(255));
INSERT INTO DEPT1 VALUES (1, 'A', 'ENGINEER'),
						 (2, 'B', 'SALESMAN'),
                         (3, 'C', 'MANAGER'),
                         (4, 'D', 'SALESMAN'),
                         (5, 'E', 'ENGINEER');

CREATE TABLE DEPT2 (EMPID INT, NAME VARCHAR(255), ROLE VARCHAR(255));
INSERT INTO DEPT2 VALUES (3, 'C', 'MANAGER'),
						 (6, 'F', 'MARKETING'),
                         (7, 'G', 'SALESMAN');
                         
-- LIST ALL EMPLOYEES
SELECT * FROM DEPT1
UNION
SELECT * FROM DEPT2;

-- LIST ALL SALESMAN EMPLOYEES(UNION)
SELECT * FROM DEPT1 WHERE ROLE = 'SALESMAN'
UNION
SELECT * FROM DEPT2 WHERE ROLE = 'SALESMAN';

-- EMPLOYEES WHO WORK FOR BOTH DEPARTMENTS (INTERSECT)
SELECT * FROM DEPT1 INNER JOIN DEPT2 USING (EMPID);
SELECT DEPT1.* FROM DEPT1 INNER JOIN DEPT2 USING (EMPID);

-- LIST ALL EMPLOYEES WORKING IN DEPT1 BUT NOT IN DEPT2 (MINUS)
SELECT * FROM DEPT1 LEFT JOIN DEPT2 USING (EMPID); -- (NORMAL LEFFT JOIN)
SELECT DEPT1.* FROM DEPT1 LEFT JOIN DEPT2 USING (EMPID) WHERE DEPT2.EMPID IS NULL;

-- SUBQURIES (USING THE EMP, PROJ, CLIENT SCHEMA)
-- 1) WHERE CLAUSE (SAME TABLE)
-- EMPLOYEE AGE > 30
SELECT * FROM EMPLOYEE WHERE AGE IN (SELECT AGE FROM EMPLOYEE WHERE AGE > 30);
SELECT AGE FROM EMPLOYEE WHERE AGE > 30;

-- WHERE CLAUSE (DIFF TABLE)
-- EMP DETAILS WORKING IN MORE THAN 1 PROJECT
SELECT * FROM EMPLOYEE WHERE ID IN
(SELECT EMP_ID FROM PROJECT GROUP BY EMP_ID HAVING COUNT(EMP_ID) > 1);

SELECT E.* FROM EMPLOYEE AS E INNER JOIN PROJECT AS P ON E.ID = P.EMP_ID
GROUP BY P.EMP_ID HAVING COUNT(P.EMP_ID) > 1;

-- SINGLE VALUE SUBQUERY
-- EMP DETAILS HAVING AGE > AVG AGE
SELECT AVG(AGE) FROM EMPLOYEE;
SELECT * FROM EMPLOYEE WHERE AGE > (SELECT AVG(AGE) FROM EMPLOYEE);

-- 2) FROM CLAUSE - DERIVED TABLES
-- SELECT MAX AGE PERSON WHOSE FIRST NAME CONTAINS 'a'
SELECT MAX(AGE) FROM (SELECT * FROM EMPLOYEE WHERE FNAME LIKE '%a%') AS DUP;

-- 3) CORELATED SUBQUERY
-- FIND 3RD OLDEST EMPLOYEE
SELECT * FROM EMPLOYEE E1 WHERE 3 = (SELECT COUNT(E2.AGE) FROM EMPLOYEE E2 WHERE (E2.AGE >= E1.AGE));

-- SQL VIEWS
SELECT * FROM EMPLOYEE;

-- CREATING VIEW
CREATE VIEW CUSTOM_VIEW AS SELECT FNAME, AGE FROM EMPLOYEE;

-- VIEWING FROM VIEW
SELECT * FROM CUSTOM_VIEW;

-- ALTERING THE VIEW
ALTER VIEW CUSTOM_VIEW AS SELECT FNAME, LNAME, AGE FROM EMPLOYEE;

-- DROPPING THE VIEW
DROP VIEW IF EXISTS CUSTOM_VIEW;